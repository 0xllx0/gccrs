------------------------------------------------------------------------------
--                                                                          --
--                         GNAT COMPILER COMPONENTS                         --
--                                                                          --
--        S Y S T E M . F I N A L I Z A T I O N _ P R I M I T I V E S       --
--                                                                          --
--                                 S p e c                                  --
--                                                                          --
--            Copyright (C) 2023, Free Software Foundation, Inc.            --
--                                                                          --
-- GNAT is free software;  you can  redistribute it  and/or modify it under --
-- terms of the  GNU General Public License as published  by the Free Soft- --
-- ware  Foundation;  either version 3,  or (at your option) any later ver- --
-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --
-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --
--                                                                          --
-- As a special exception under Section 7 of GPL version 3, you are granted --
-- additional permissions described in the GCC Runtime Library Exception,   --
-- version 3.1, as published by the Free Software Foundation.               --
--                                                                          --
-- You should have received a copy of the GNU General Public License and    --
-- a copy of the GCC Runtime Library Exception along with this program;     --
-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
-- <http://www.gnu.org/licenses/>.                                          --
--                                                                          --
-- GNAT was originally developed  by the GNAT team at  New York University. --
-- Extensive contributions were provided by Ada Core Technologies Inc.      --
--                                                                          --
------------------------------------------------------------------------------

--  This package encapsulates the types and operations used by the compiler
--  to support finalization of objects of Ada controlled types (types derived
--  from types Controlled and Limited_Controlled).

package System.Finalization_Primitives with Preelaborate is

   type Finalize_Address_Ptr is access procedure (Obj : System.Address);
   --  Values of this type denote finalization procedures associated with
   --  objects that have controlled parts. For convenience, such objects
   --  are simply referred to as controlled objects in the remainder of
   --  this package.

   type Master_Node is private;
   --  Each controlled object associated with a finalization master has an
   --  associated master node created by the compiler.

   type Master_Node_Ptr is access all Master_Node;
   for Master_Node_Ptr'Storage_Size use 0;
   --  A reference to a master node. Since this type may not be used to
   --  allocate objects, its storage size is zero.

   --------------------------------------------------------------------------
   --  Types and operations of finalization masters: A finalization master
   --  is used to manage a set of controlled objects declared at the library
   --  level of the program or associated with the declarative part of a
   --  subprogram or other closed scopes (block statements, for example).

   type Finalization_Scope_Master
     (Exceptions_OK : Boolean;
      Extra_Info    : Boolean;
      Library_Level : Boolean) is limited private;
   --  Objects of this type encapsulate an ordered list of zero or more master
   --  nodes, each of which is associated with a controlled object.

   procedure Attach_Object_To_Master
     (Object_Address   : System.Address;
      Finalize_Address : not null Finalize_Address_Ptr;
      Node             : not null Master_Node_Ptr;
      Master           : in out Finalization_Scope_Master);
   --  Associates a controlled object and its master node with a given master.
   --  Finalize_Address denotes the operation to be called to finalize the
   --  object (which could be a user-declared Finalize procedure or a procedure
   --  generated by the compiler). An object can be associated with at most one
   --  finalization master.

   procedure Attach_Object_To_Node
     (Object_Address   : System.Address;
      Finalize_Address : not null Finalize_Address_Ptr;
      Node             : in out Master_Node);
   --  Associates a controlled object with its master node only. This is used
   --  when there is a single object to be finalized in the context.

   procedure Finalize_Master (Master : in out Finalization_Scope_Master);
   --  Finalizes each of the controlled objects associated with Master, in the
   --  reverse of the order in which they were attached, and releases the space
   --  that was allocated on the secondary stack if Master.SS_Mark is not null.
   --  Calls to this procedure with a Master that has already been finalized
   --  have no effects.

   procedure Finalize_Object (Node : in out Master_Node);
   --  Finalizes the controlled object attached to Node

   procedure Suppress_Object_Finalize_At_End (Node : in out Master_Node);
   --  Changes the state of Node to effectively suppress a call to Node's
   --  associated object's Finalize procedure. This is called at the end
   --  of an extended return statement of a function whose result type
   --  needs finalization, to ensure that the function's return object is
   --  not finalized within the function in the case the return statement
   --  is completed normally (it will still be finalized if an exception
   --  is raised before the normal completion of the return statement).

private

   --  Master node type structure

   type Master_Node is record
      Object_Address   : System.Address       := System.Null_Address;
      Finalize_Address : Finalize_Address_Ptr := null;
      Next             : Master_Node_Ptr      := null;
   end record;

    --  Finalization scope master type structure. A unique master is associated
    --  with each scope containing controlled objects.

   type Finalization_Scope_Master
     (Exceptions_OK : Boolean;
      Extra_Info    : Boolean;
      Library_Level : Boolean) is limited
   record
      Head : Master_Node_Ptr := null;
   end record;

   --  These operations need to be performed in line for maximum performance

   pragma Inline (Attach_Object_To_Master);
   pragma Inline (Attach_Object_To_Node);
   pragma Inline (Finalize_Object);
   pragma Inline (Suppress_Object_Finalize_At_End);

end System.Finalization_Primitives;
